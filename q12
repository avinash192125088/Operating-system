#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_PHILOSOPHERS 5

sem_t forks[NUM_PHILOSOPHERS];

void *philosopher(void *num);
void take_forks(int);
void put_forks(int);

int main()
{
    int i;
    pthread_t philosophers[NUM_PHILOSOPHERS];
    for (i = 0; i < NUM_PHILOSOPHERS; i++)
        sem_init(&forks[i], 0, 1);

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, (void *)i);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
}

void *philosopher(void *num)
{
    while (1) {
        int *i = num;
        printf("Philosopher %d is thinking\n", *i);
        take_forks(*i);
        printf("Philosopher %d is eating\n", *i);
        put_forks(*i);
    }
}

void take_forks(int num)
{
    sem_wait(&forks[num]);
    sem_wait(&forks[(num + 1) % NUM_PHILOSOPHERS]);
}

void put_forks(int num)
{
    sem_post(&forks[num]);
    sem_post(&forks[(num + 1) % NUM_PHILOSOPHERS]);
}
